{"version":3,"file":"static/js/125.2b303c8e.chunk.js","mappings":"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","sources":["components/common/fields/RemoteSelect.js","validation-schemas/product/Product.schema.js","components/ProductDetail/ProductForm.js","hooks/useUpdateProduct.js","validation-schemas/product/PromotionSchema.js","components/common/fields/RadioInput.js","components/PromoteProductForm/PromoteProductForm.js","components/ProductDetail/PromoteProductModal.js","components/ProductDetail/ProductDetail.js","hooks/useModal.js","hooks/useDeleteProduct.js","components/common/fields/DirtyFormik.js","utils/difference.js"],"sourcesContent":["import { FormControl, FormLabel, Box, FormHelperText } from \"@mui/joy\";\nimport AsyncSelect from \"react-select/async\";\nimport { useField } from \"formik\";\nimport { useTheme } from \"@mui/joy/styles\";\n\nexport default function RemoteSelect({\n  name,\n  label,\n  defaultOptions = true,\n  getOptions,\n  getOptionLabel,\n  getOptionValue,\n  isMulti,\n  placeholder,\n  sx,\n  ...props\n}) {\n  const theme = useTheme();\n  const [\n    ,\n    { value: selectedOptions, touched, error },\n    { setValue, setTouched },\n  ] = useField({ name, ...props });\n\n  const hasError = touched && !!error;\n  return (\n    <FormControl sx={Array.isArray(sx) ? sx : [sx]} error={hasError}>\n      <FormLabel>{label}</FormLabel>\n      <Box sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        <AsyncSelect\n          isMulti={isMulti}\n          loadOptions={getOptions}\n          defaultOptions={defaultOptions}\n          value={selectedOptions}\n          getOptionLabel={getOptionLabel}\n          getOptionValue={getOptionValue}\n          isClearable={false}\n          onChange={(value) => {\n            setTouched(true);\n            setValue(value);\n          }}\n          placeholder={placeholder}\n          /* Hide the multi value container in order to use the select just like a search field */\n          styles={{\n            container: (baseCss) => ({\n              ...baseCss,\n              display: \"inline-block\",\n              flexGrow: 1,\n            }),\n            control: (baseCss) => ({\n              ...baseCss,\n              border: error\n                ? `1px solid ${theme.palette.danger.outlinedBorder}`\n                : baseCss?.border,\n            }),\n          }}\n        />\n      </Box>\n      {hasError && (\n        <FormHelperText sx={{ fontSize: \"sm\" }}>{error}</FormHelperText>\n      )}\n    </FormControl>\n  );\n}\n","import * as Yup from \"yup\";\n\nconst ProductSchema = Yup.object({\n  name: Yup.string().max(100).required(\"Product name is required\"),\n  description: Yup.string().max(500).required(\"Description is required\"),\n  categories: Yup.array().min(1, \"Specify atleast one category\"),\n});\n\nexport default ProductSchema;\n","import { useState } from \"react\";\nimport TextInput from \"../common/fields/TextInput\";\nimport { Form } from \"formik\";\nimport Textarea from \"../common/fields/Textarea\";\nimport { toast } from \"react-toastify\";\nimport RemoteSelect from \"../common/fields/RemoteSelect\";\nimport ProductSchema from \"../../validation-schemas/product/Product.schema\";\nimport difference from \"../../utils/difference\";\nimport isEmpty from \"../../utils/isEmpty\";\nimport { useLazyGetProductsCategoriesQuery } from \"../../services/productCategories\";\nimport DirtyFormik from \"../common/fields/DirtyFormik\";\nimport useUpdateProduct from \"../../hooks/useUpdateProduct\";\nimport SaveOutlinedIcon from \"@mui/icons-material/SaveOutlined\";\nimport { Stack, Button } from \"@mui/joy\";\n\nexport default function ProductForm({ product }) {\n  const [isDirty, setIsDirty] = useState(false);\n  const [updateProduct, isUpdatingProduct] = useUpdateProduct();\n  const [fetchProductCategories] = useLazyGetProductsCategoriesQuery();\n  return (\n    <DirtyFormik\n      initialValues={{\n        ...product,\n      }}\n      validationSchema={ProductSchema}\n      onSubmit={async (values) => {\n        const updatedValues = difference(product, values);\n        if (!isEmpty(updatedValues)) {\n          await updateProduct(product.id, updatedValues);\n        }\n      }}\n      onDirty={(isDirty) => setIsDirty(isDirty)}\n    >\n      <Form>\n        <TextInput sx={{ marginTop: 3 }} name=\"name\" label=\"Product name\" />\n        <RemoteSelect\n          sx={{ marginTop: 2 }}\n          isMulti={true}\n          name=\"categories\"\n          label=\"Categories\"\n          getOptionLabel={(option) => option.name}\n          getOptionValue={(option) => option.id}\n          getOptions={(inputValue, callback) => {\n            fetchProductCategories()\n              .unwrap()\n              .then(({ data: productCategories }) => {\n                callback(\n                  productCategories.filter(({ name }) =>\n                    name.toLowerCase().includes(inputValue.toLowerCase())\n                  )\n                );\n              })\n              .catch((err) => toast.error(err?.message));\n          }}\n        />\n        <Textarea\n          sx={{ marginTop: 2 }}\n          name=\"description\"\n          label=\"Description\"\n        ></Textarea>\n\n        <Stack\n          direction=\"row\"\n          sx={{\n            marginTop: 2,\n            width: \"100%\",\n          }}\n        >\n          <Button\n            sx={{ flexGrow: 1 }}\n            type=\"reset\"\n            size=\"md\"\n            variant=\"soft\"\n            color=\"success\"\n            disabled={!isDirty || isUpdatingProduct}\n          >\n            Undo Changes\n          </Button>\n          <Button\n            size=\"md\"\n            color=\"success\"\n            variant=\"solid\"\n            startDecorator={<SaveOutlinedIcon />}\n            sx={{ flexGrow: 2, marginLeft: 2 }}\n            type=\"submit\"\n            disabled={!isDirty || isUpdatingProduct}\n            loading={isUpdatingProduct}\n            loadingPosition=\"start\"\n          >\n            Save\n          </Button>\n        </Stack>\n      </Form>\n    </DirtyFormik>\n  );\n}\n","import { toast } from \"react-toastify\";\nimport { useUpdateProductMutation } from \"../services/product\";\nimport { useState } from \"react\";\nimport parseError from \"../components/common/utils/parse-error\";\n\nexport default function useUpdateProduct() {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [_updateProduct] = useUpdateProductMutation();\n  async function updateProduct(productId, body) {\n    const bodyCopy = structuredClone(body);\n    const { categories } = bodyCopy;\n    // Format the categories in the structure expected by the API\n    if (!!categories?.length) {\n      bodyCopy[\"categoriesIds\"] = categories.map((category) => category.id);\n      delete bodyCopy[\"categories\"];\n    }\n    const { unwrap } = _updateProduct({ productId, ...bodyCopy });\n    try {\n      setIsUpdating(true);\n      const data = await unwrap();\n      toast.success(\"Product updated\");\n      return data;\n    } catch (err) {\n      toast.error(`Product update failed. Reason: ${parseError(err)}`);\n    } finally {\n      setIsUpdating(false);\n    }\n  }\n\n  return [updateProduct, isUpdating];\n}\n","import * as Yup from \"yup\";\n\nconst PromotionSchema = Yup.object({\n  recipient: Yup.string()\n    .required(\"Choose the recipients of the promotion\")\n    .oneOf([\"allFarmers\", \"allGroups\", \"selectGroup\"]),\n  group: Yup.mixed().when(\"recipient\", {\n    is: \"selectGroup\",\n    then: (schema) => schema.required(\"You have to choose a group\"),\n    otherwise: (schema) => schema.nullable(),\n  }),\n  message: Yup.string().required(\"A promotion message is required\"),\n});\n\nexport default PromotionSchema;\n","import {\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n} from \"@mui/joy\";\nimport { useField, ErrorMessage } from \"formik\";\n\nexport default function RadioInput({\n  name,\n  label,\n  options,\n  sx = [],\n  ...props\n}) {\n  const [{ value }, { error, touched }, { setValue }] = useField({\n    name,\n    ...props,\n  });\n  const hasError = touched && !!error;\n\n  return (\n    <FormControl sx={Array.isArray(sx) ? sx : [sx]} error={hasError}>\n      <FormLabel>{label}</FormLabel>\n      <RadioGroup\n        {...props}\n        name={name}\n        value={value}\n        onChange={({ target }) => setValue(target.value)}\n      >\n        {Object.keys(options).map((key, index) => (\n          <Radio\n            value={key}\n            label={options[key]}\n            key={key}\n            variant=\"soft\"\n            color=\"success\"\n            size=\"sm\"\n          />\n        ))}\n      </RadioGroup>\n      <FormHelperText sx={{ fontSize: \"sm\" }}>\n        <ErrorMessage name={name} />\n      </FormHelperText>\n    </FormControl>\n  );\n}\n","import {\n  Avatar,\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Chip,\n  Button,\n} from \"@mui/joy\";\nimport { Form, Formik } from \"formik\";\nimport PromotionSchema from \"../../validation-schemas/product/PromotionSchema\";\nimport resolvePhotoSrc from \"../../utils/resolve-photo-src\";\nimport toTitleCase from \"../../utils/toTitleCase\";\nimport RadioInput from \"../common/fields/RadioInput\";\nimport Textarea from \"../common/fields/Textarea\";\n\nexport default function PromoteProductForm({ product }) {\n  return (\n    <Box>\n      <Card\n        variant=\"soft\"\n        orientation=\"horizontal\"\n        sx={{ marginBottom: 5, overflow: \"hidden\" }}\n      >\n        <CardContent orientation=\"horizontal\">\n          <Avatar size=\"lg\" src={resolvePhotoSrc(product.coverPhoto)}>\n            {product.name}\n          </Avatar>\n          <Box>\n            <Typography level=\"h3\">{toTitleCase(product.name)}</Typography>\n\n            <Box level=\"body-xs\" sx={{ marginTop: 1 }}>\n              {product.categories.map(({ name }, index) => (\n                <Chip\n                  size=\"sm\"\n                  key={index}\n                  color=\"success\"\n                  sx={{ marginRight: 1, overflow: \"scroll\" }}\n                >\n                  {name}\n                </Chip>\n              ))}\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n\n      <Formik\n        validationSchema={PromotionSchema}\n        initialValues={{\n          recipient: \"\",\n          group: null,\n          message: \"\",\n        }}\n      >\n        <Form>\n          <RadioInput\n            name=\"recipient\"\n            label=\"Send promotion to\"\n            options={{\n              allFarmers: \"All farmers\",\n              allGroups: \"Al groups\",\n              selectGroup: \"Select group\",\n            }}\n            sx={{ marginBottom: 2 }}\n          ></RadioInput>\n          <Textarea name=\"message\" label=\"Message\" />\n          <Button\n            type=\"submit\"\n            sx={{ marginTop: 2, borderRadius: \"lg\", width: \"100%\" }}\n            color=\"success\"\n          >\n            Promote\n          </Button>\n        </Form>\n      </Formik>\n    </Box>\n  );\n}\n","import {\n  Modal,\n  ModalClose,\n  ModalDialog,\n  DialogTitle,\n  ModalOverflow,\n} from \"@mui/joy\";\nimport PromoteProductForm from \"../PromoteProductForm/PromoteProductForm\";\n\nexport default function PromoteProductModal({ isOpen, onClose, product }) {\n  return (\n    <Modal open={isOpen} onClose={onClose} size=\"lg\">\n      <ModalOverflow>\n        <ModalDialog sx={{ width: 500, maxWidth: \"95vw\" }}>\n          <ModalClose />\n          <DialogTitle>Promote Prouct</DialogTitle>\n          <PromoteProductForm product={product} />\n        </ModalDialog>\n      </ModalOverflow>\n    </Modal>\n  );\n}\n","import {\n  AspectRatio,\n  Avatar,\n  Box,\n  Button,\n  ButtonGroup,\n  Card,\n  CardContent,\n  IconButton,\n  Stack,\n  Typography,\n} from \"@mui/joy\";\nimport ChevronRightOutlinedIcon from \"@mui/icons-material/ChevronRightOutlined\";\nimport DeleteOutlinedIcon from \"@mui/icons-material/DeleteOutlined\";\nimport StarBorderOutlinedIcon from \"@mui/icons-material/StarBorderOutlined\";\nimport { Link as RouterLink, useParams } from \"react-router-dom\";\nimport { useGetProductQuery } from \"../../services/product\";\nimport Loading from \"../common/utils/Loading\";\nimport { useState } from \"react\";\nimport resolvePhotoSrc from \"../../utils/resolve-photo-src\";\nimport toTitleCase from \"../../utils/toTitleCase\";\nimport Error from \"../../components/common/utils/Error\";\nimport useDeleteProduct from \"../../hooks/useDeleteProduct\";\nimport ProductForm from \"./ProductForm\";\nimport PromoteProductModal from \"./PromoteProductModal\";\nimport useModal from \"../../hooks/useModal\";\n\nexport default function ProductDetail() {\n  const { id: productId } = useParams();\n  const [currentPhoto, setCurrentPhoto] = useState(null);\n  const [isPromoteModalOpen, openPromoteModal, closePromoteModal] = useModal();\n  const [deleteProduct, isDeletingProduct] = useDeleteProduct();\n  const {\n    data: product,\n    error: productFetchError,\n    isFetching: isFetchingProducts,\n  } = useGetProductQuery(productId);\n\n  if (isFetchingProducts) {\n    return <Loading />;\n  }\n  if (!!productFetchError) {\n    return <Error error={productFetchError} />;\n  }\n\n  if (!!product) {\n    return (\n      <Box\n        sx={{\n          padding: 2,\n          marginBottom: 3,\n          maxWidth: 800,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <Box\n          sx={{\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            maxWidth: 500,\n          }}\n        >\n          <AspectRatio variant=\"plain\">\n            <img\n              src={currentPhoto || resolvePhotoSrc(product.coverPhoto)}\n              alt={product.name}\n            />\n          </AspectRatio>\n\n          <Stack\n            spacing={2}\n            direction=\"row\"\n            sx={{\n              marginTop: 2,\n              justifyContent: \"center\",\n            }}\n          >\n            {[\n              product.coverPhoto,\n              product.photo1,\n              product.photo2,\n              product.photo3,\n              product.photo4,\n            ].map((photo, index) => (\n              <AspectRatio key={index} sx={{ width: 100, cursor: \"pointer\" }}>\n                <img\n                  src={resolvePhotoSrc(photo)}\n                  alt={product.name}\n                  onClick={() => setCurrentPhoto(resolvePhotoSrc(photo))}\n                />\n              </AspectRatio>\n            ))}\n          </Stack>\n\n          <ButtonGroup\n            variant=\"soft\"\n            color=\"warning\"\n            buttonFlex={1}\n            sx={{ marginTop: 3 }}\n          >\n            <Button\n              disabled={isDeletingProduct}\n              loading={isDeletingProduct}\n              loadingPosition=\"start\"\n              startDecorator={<DeleteOutlinedIcon />}\n              onClick={async () => {\n                await deleteProduct(productId);\n              }}\n            >\n              Delete\n            </Button>\n\n            <Button\n              startDecorator={<StarBorderOutlinedIcon />}\n              disabled={product.isFeatured}\n              onClick={() => openPromoteModal()}\n            >\n              Promote\n            </Button>\n          </ButtonGroup>\n\n          <Typography level=\"h4\" sx={{ marginTop: 3 }}>\n            {toTitleCase(product.name)}\n          </Typography>\n          <Typography sx={{ marginTop: 2 }} level=\"body-md\">\n            Sold by\n          </Typography>\n          <Card>\n            <CardContent orientation=\"horizontal\">\n              <Avatar\n                src={resolvePhotoSrc(product.esco.profilePhoto)}\n                alt={product.esco.name}\n              />\n              <Typography level=\"body-sm\">\n                {toTitleCase(product.esco.name)}\n              </Typography>\n              <IconButton\n                sx={{ marginLeft: \"auto\" }}\n                component={RouterLink}\n                to={`/escos/${product.esco.id}`}\n              >\n                <ChevronRightOutlinedIcon />\n              </IconButton>\n            </CardContent>\n          </Card>\n          <ProductForm product={product} />\n        </Box>\n        <PromoteProductModal\n          product={product}\n          isOpen={isPromoteModalOpen}\n          onClose={closePromoteModal}\n        />\n      </Box>\n    );\n  }\n}\n","import { useState } from \"react\";\n\nexport default function useModal() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  function openModal() {\n    setIsModalOpen(true);\n  }\n\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n  return [isModalOpen, openModal, closeModal];\n}\n","import { toast } from \"react-toastify\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { useDeleteProductMutation } from \"../services/product\";\n\nexport default function useDeleteProduct(redirectTo = \"/products\") {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const navigate = useNavigate();\n  const [_deleteProduct] = useDeleteProductMutation();\n  async function deleteProduct(escoId) {\n    const { unwrap } = _deleteProduct(escoId);\n    try {\n      setIsDeleting(true);\n      await unwrap();\n      toast.success(\"Product deleted\");\n      navigate(redirectTo);\n    } catch (err) {\n      toast.error(\"Product deletion failed\");\n    } finally {\n      setIsDeleting(false);\n    }\n  }\n\n  return [deleteProduct, isDeleting];\n}\n","import { Formik, useFormikContext } from \"formik\";\nimport { useEffect } from \"react\";\n\nfunction IsDirtyForm({ onDirty, children }) {\n  const { dirty: isDirty } = useFormikContext();\n  useEffect(() => {\n    onDirty(isDirty);\n  }, [isDirty, onDirty]);\n  return <>{children}</>;\n}\n\nexport default function DirtyFormik({ children, onDirty, ...props }) {\n  return (\n    <Formik {...props}>\n      <IsDirtyForm onDirty={onDirty}>{children}</IsDirtyForm>\n    </Formik>\n  );\n}\n","const transform = require(\"lodash.transform\");\nconst isEqual = require(\"lodash.isequal\");\nconst isObject = require(\"lodash.isobject\");\n\nconst { isArray } = Array;\n/**\n * Find difference between two objects\n * @param  {object} origObj - Source object to compare newObj against\n * @param  {object} newObj  - New object with potential changes\n * @return {object} differences\n */\nexport default function difference(origObj, newObj) {\n  function changes(newObj, origObj) {\n    return transform(newObj, function (result, value, key) {\n      if (!isEqual(value, origObj[key])) {\n        /* For arrays, the whole changed array is taken instead of picking only \n        the differences between the original array and the changed array */\n        result[key] =\n          isObject(value) &&\n          isObject(origObj[key]) &&\n          !isArray(value) &&\n          !isArray(origObj[key])\n            ? changes(value, origObj[key])\n            : value;\n      }\n    });\n  }\n  return changes(newObj, origObj);\n}\n"],"names":["RemoteSelect","_ref","name","label","defaultOptions","getOptions","getOptionLabel","getOptionValue","isMulti","placeholder","sx","props","theme","useTheme","value","selectedOptions","touched","error","setValue","setTouched","useField","hasError","_jsxs","FormControl","Array","isArray","children","_jsx","FormLabel","Box","display","flexWrap","AsyncSelect","loadOptions","isClearable","onChange","styles","container","baseCss","flexGrow","control","border","palette","danger","outlinedBorder","FormHelperText","fontSize","Yup","max","required","description","categories","min","ProductForm","product","isDirty","setIsDirty","useState","updateProduct","isUpdatingProduct","isUpdating","setIsUpdating","_updateProduct","useUpdateProductMutation","async","productId","body","bodyCopy","structuredClone","length","map","category","id","unwrap","data","toast","success","err","parseError","useUpdateProduct","fetchProductCategories","useLazyGetProductsCategoriesQuery","DirtyFormik","initialValues","validationSchema","ProductSchema","onSubmit","updatedValues","difference","values","isEmpty","onDirty","Form","TextInput","marginTop","option","inputValue","callback","then","_ref2","productCategories","filter","_ref3","toLowerCase","includes","catch","message","Textarea","Stack","direction","width","Button","type","size","variant","color","disabled","startDecorator","SaveOutlinedIcon","marginLeft","loading","loadingPosition","recipient","oneOf","group","when","is","schema","otherwise","nullable","RadioInput","options","RadioGroup","target","Object","keys","key","index","Radio","ErrorMessage","PromoteProductForm","Card","orientation","marginBottom","overflow","CardContent","Avatar","src","resolvePhotoSrc","coverPhoto","Typography","level","toTitleCase","Chip","marginRight","Formik","PromotionSchema","allFarmers","allGroups","selectGroup","borderRadius","PromoteProductModal","isOpen","onClose","Modal","open","ModalOverflow","ModalDialog","maxWidth","ModalClose","DialogTitle","ProductDetail","useParams","currentPhoto","setCurrentPhoto","isPromoteModalOpen","openPromoteModal","closePromoteModal","isModalOpen","setIsModalOpen","useModal","deleteProduct","isDeletingProduct","redirectTo","arguments","undefined","isDeleting","setIsDeleting","navigate","useNavigate","_deleteProduct","useDeleteProductMutation","escoId","useDeleteProduct","productFetchError","isFetching","isFetchingProducts","useGetProductQuery","Loading","Error","padding","position","AspectRatio","alt","spacing","justifyContent","photo1","photo2","photo3","photo4","photo","cursor","onClick","ButtonGroup","buttonFlex","DeleteOutlinedIcon","StarBorderOutlinedIcon","isFeatured","esco","profilePhoto","IconButton","component","RouterLink","to","ChevronRightOutlinedIcon","IsDirtyForm","dirty","useFormikContext","useEffect","_Fragment","transform","require","isEqual","isObject","origObj","newObj","changes","result"],"sourceRoot":""}