{"version":3,"file":"static/js/315.af042447.chunk.js","mappings":"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","sources":["components/common/fields/RemoteSelect.js","validation-schemas/product/Product.schema.js","components/ProductDetail/ProductDetail.js","components/common/fields/DirtyFormik.js","utils/difference.js"],"sourcesContent":["import { FormControl, FormLabel, Box, FormHelperText } from \"@mui/joy\";\nimport AsyncSelect from \"react-select/async\";\nimport { useField } from \"formik\";\nimport { useTheme } from \"@mui/joy/styles\";\n\nconst SELECT_OPTION_ACTION = \"select-option\";\nconst REMOVE_OPTION_ACTION = \"remove-value\";\n\nexport default function RemoteSelect({\n  name,\n  label,\n  defaultOptions = true,\n  getOptions,\n  getOptionLabel,\n  getOptionValue,\n  isMulti,\n  placeholder,\n  containerSx,\n  ...props\n}) {\n  const theme = useTheme();\n  const [\n    ,\n    { value: selectedOptions, touched, error },\n    { setValue, setError, setTouched },\n  ] = useField({ name, ...props });\n\n  const hasError = touched && !!error;\n  function handleAction(action, option) {\n    setTouched(true);\n    switch (action) {\n      case SELECT_OPTION_ACTION:\n        return addOption(option);\n      case REMOVE_OPTION_ACTION:\n        return removeOption(option);\n      default:\n        return setError(\"Unknown action performed\");\n    }\n  }\n\n  function removeOption(option) {\n    setValue(\n      selectedOptions.filter(\n        (selectedOption) =>\n          getOptionValue(selectedOption) !== getOptionValue(option)\n      )\n    );\n  }\n  function addOption(option) {\n    // Before adding an option, filter to remove any duplicates of the option that might be selected\n    setValue(\n      selectedOptions\n        .filter(\n          (selectedOption) =>\n            getOptionValue(selectedOption) !== getOptionValue(option)\n        )\n        .concat([option])\n    );\n  }\n\n  return (\n    <FormControl sx={containerSx} error={hasError}>\n      <FormLabel>{label}</FormLabel>\n      <Box sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        <AsyncSelect\n          isMulti={isMulti}\n          loadOptions={getOptions}\n          defaultOptions={defaultOptions}\n          value={selectedOptions}\n          getOptionLabel={getOptionLabel}\n          getOptionValue={getOptionValue}\n          isClearable={false}\n          onChange={(newValue, actionType) => {\n            const { action, option, removedValue } = actionType;\n            return handleAction(action, option || removedValue);\n          }}\n          placeholder={placeholder}\n          /* Hide the multi value container in order to use the select just like a search field */\n          styles={{\n            container: (baseCss) => ({\n              ...baseCss,\n              display: \"inline-block\",\n              flexGrow: 1,\n            }),\n            control: (baseCss) => ({\n              ...baseCss,\n              border: error\n                ? `1px solid ${theme.palette.danger.outlinedBorder}`\n                : baseCss?.border,\n            }),\n          }}\n        />\n      </Box>\n      {hasError && (\n        <FormHelperText sx={{ fontSize: \"sm\" }}>{error}</FormHelperText>\n      )}\n    </FormControl>\n  );\n}\n","import * as Yup from \"yup\";\n\nconst ProductSchema = Yup.object({\n  name: Yup.string().max(100).required(\"Product name is required\"),\n  description: Yup.string().max(500).required(\"Description is required\"),\n  categories: Yup.array().min(1, \"Specify atleast one category\"),\n});\n\nexport default ProductSchema;\n","import {\n  AspectRatio,\n  Avatar,\n  Box,\n  Button,\n  ButtonGroup,\n  Card,\n  CardContent,\n  IconButton,\n  Stack,\n  Typography,\n} from \"@mui/joy\";\nimport SaveOutlinedIcon from \"@mui/icons-material/SaveOutlined\";\nimport ChevronRightOutlinedIcon from \"@mui/icons-material/ChevronRightOutlined\";\nimport DeleteOutlinedIcon from \"@mui/icons-material/DeleteOutlined\";\nimport StarBorderOutlinedIcon from \"@mui/icons-material/StarBorderOutlined\";\nimport TextInput from \"../common/fields/TextInput\";\nimport { Link as RouterLink, useParams } from \"react-router-dom\";\nimport {\n  useGetProductQuery,\n  useUpdateProductMutation,\n} from \"../../services/product\";\nimport Loading from \"../common/utils/Loading\";\nimport { Form } from \"formik\";\nimport Textarea from \"../common/fields/Textarea\";\nimport { toast } from \"react-toastify\";\nimport RemoteSelect from \"../common/fields/RemoteSelect\";\nimport { useState } from \"react\";\nimport ProductSchema from \"../../validation-schemas/product/Product.schema\";\nimport difference from \"../../utils/difference\";\nimport isEmpty from \"../../utils/isEmpty\";\nimport { useLazyGetProductsCategoriesQuery } from \"../../services/productCategories\";\nimport parseError from \"../common/utils/parse-error\";\nimport DirtyFormik from \"../common/fields/DirtyFormik\";\nimport resolvePhotoSrc from \"../../utils/resolve-photo-src\";\n\nexport default function ProductDetail() {\n  const [isDirty, setIsDirty] = useState(false);\n  const [fetchProductCategories] = useLazyGetProductsCategoriesQuery();\n  const { id: productId } = useParams();\n  const [currentPhoto, setCurrentPhoto] = useState(null);\n\n  const {\n    data: product,\n    error: productFetchError,\n    isFetching: isProductFetchPending,\n  } = useGetProductQuery(productId);\n  const [\n    updateProduct,\n    {\n      isError: isProductUpdateFailed,\n      error: productUpdateError,\n      isLoading: isProductUpdatePending,\n      isSucess: isProductUpdateSuccess,\n    },\n  ] = useUpdateProductMutation();\n\n  if (isProductFetchPending) {\n    return <Loading />;\n  }\n  if (!!productFetchError) {\n    toast.error(parseError(productFetchError));\n  }\n\n  if (isProductUpdateFailed) {\n    toast.error(parseError(productUpdateError));\n  }\n  if (isProductUpdateSuccess) {\n    toast.success(\"Product updated\");\n  }\n  if (!!product) {\n    return (\n      <Box\n        sx={{\n          padding: 2,\n          marginBottom: 3,\n          maxWidth: 800,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <Box\n          sx={{\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            maxWidth: 500,\n          }}\n        >\n          <AspectRatio variant=\"plain\">\n            <img\n              src={currentPhoto || resolvePhotoSrc(product.coverPhoto)}\n              alt={product.name}\n            />\n          </AspectRatio>\n\n          <Stack\n            spacing={2}\n            direction=\"row\"\n            sx={{\n              marginTop: 2,\n              justifyContent: \"center\",\n            }}\n          >\n            {[\n              product.coverPhoto,\n              product.photo1,\n              product.photo2,\n              product.photo3,\n              product.photo4,\n            ].map((photo, index) => (\n              <AspectRatio key={index} sx={{ width: 100, cursor: \"pointer\" }}>\n                <img\n                  src={resolvePhotoSrc(photo)}\n                  alt={product.name}\n                  onClick={() => setCurrentPhoto(resolvePhotoSrc(photo))}\n                />\n              </AspectRatio>\n            ))}\n          </Stack>\n\n          <ButtonGroup\n            variant=\"soft\"\n            color=\"warning\"\n            buttonFlex={1}\n            sx={{ marginTop: 3 }}\n          >\n            <Button startDecorator={<DeleteOutlinedIcon />}>Delete</Button>\n\n            <Button startDecorator={<StarBorderOutlinedIcon />}>Feature</Button>\n          </ButtonGroup>\n\n          <Typography level=\"h4\" sx={{ marginTop: 3 }}>\n            {product.name}\n          </Typography>\n          <Typography sx={{ marginTop: 2 }} level=\"body-md\">\n            Sold by\n          </Typography>\n          <Card>\n            <CardContent orientation=\"horizontal\">\n              <Avatar\n                src={`${process.env.REACT_APP_MEDIA_BASE_URL}/${product.esco.profilePhoto}`}\n                alt={product.esco.name}\n              />\n              <Typography level=\"body-sm\">{product.esco.name}</Typography>\n              <IconButton\n                sx={{ marginLeft: \"auto\" }}\n                component={RouterLink}\n                to={`/escos/${product.esco.id}`}\n              >\n                <ChevronRightOutlinedIcon />\n              </IconButton>\n            </CardContent>\n          </Card>\n        </Box>\n        <DirtyFormik\n          initialValues={{\n            ...product,\n          }}\n          validationSchema={ProductSchema}\n          onSubmit={async (values) => {\n            const updatedValues = difference(product, values);\n            if (!isEmpty(updatedValues)) {\n              await updateProduct({ productId, ...updatedValues });\n            }\n          }}\n          onDirty={(isDirty) => setIsDirty(isDirty)}\n        >\n          <Form>\n            <TextInput\n              containerSx={{ marginTop: 3 }}\n              name=\"name\"\n              label=\"Product name\"\n            />\n            <RemoteSelect\n              containerSx={{ marginTop: 2 }}\n              isMulti={true}\n              name=\"categories\"\n              label=\"Categories\"\n              getOptionLabel={(option) => option.name}\n              getOptionValue={(option) => option.id}\n              getOptions={(inputValue, callback) => {\n                fetchProductCategories()\n                  .unwrap()\n                  .then(({ data: productCategories }) => {\n                    callback(\n                      productCategories.filter(({ name }) =>\n                        name.toLowerCase().includes(inputValue.toLowerCase())\n                      )\n                    );\n                  })\n                  .catch((err) => toast.error(err?.message));\n              }}\n            />\n            <Textarea\n              containerSx={{ marginTop: 2 }}\n              name=\"description\"\n              label=\"Description\"\n            ></Textarea>\n\n            <Stack\n              direction=\"row\"\n              sx={{ marginTop: 2, position: \"sticky\", bottom: 0 }}\n            >\n              <Button\n                sx={{ flexGrow: 1 }}\n                type=\"reset\"\n                size=\"md\"\n                variant=\"soft\"\n                color=\"success\"\n                disabled={!isDirty || isProductUpdatePending}\n              >\n                Undo Changes\n              </Button>\n              <Button\n                size=\"md\"\n                color=\"success\"\n                variant=\"solid\"\n                startDecorator={<SaveOutlinedIcon />}\n                sx={{ flexGrow: 2, marginLeft: 2 }}\n                type=\"submit\"\n                disabled={!isDirty || isProductUpdatePending}\n                loading={isProductUpdatePending}\n                loadingPosition=\"start\"\n              >\n                Save\n              </Button>\n            </Stack>\n          </Form>\n        </DirtyFormik>\n      </Box>\n    );\n  }\n}\n","import { Formik, useFormikContext } from \"formik\";\nimport { useEffect } from \"react\";\n\nfunction IsDirtyForm({ onDirty, children }) {\n  const { dirty: isDirty } = useFormikContext();\n  useEffect(() => {\n    onDirty(isDirty);\n  }, [isDirty, onDirty]);\n  return <>{children}</>;\n}\n\nexport default function DirtyFormik({ children, onDirty, ...props }) {\n  return (\n    <Formik {...props}>\n      <IsDirtyForm onDirty={onDirty}>{children}</IsDirtyForm>\n    </Formik>\n  );\n}\n","const transform = require(\"lodash.transform\");\nconst isEqual = require(\"lodash.isequal\");\nconst isObject = require(\"lodash.isobject\");\n\nconst { isArray } = Array;\n/**\n * Find difference between two objects\n * @param  {object} origObj - Source object to compare newObj against\n * @param  {object} newObj  - New object with potential changes\n * @return {object} differences\n */\nexport default function difference(origObj, newObj) {\n  function changes(newObj, origObj) {\n    let arrayIndexCounter = 0;\n    return transform(newObj, function (result, value, key) {\n      if (!isEqual(value, origObj[key])) {\n        let resultKey = isArray(origObj) ? arrayIndexCounter++ : key;\n        result[resultKey] =\n          isObject(value) && isObject(origObj[key])\n            ? changes(value, origObj[key])\n            : value;\n      }\n    });\n  }\n  return changes(newObj, origObj);\n}\n"],"names":["SELECT_OPTION_ACTION","REMOVE_OPTION_ACTION","RemoteSelect","_ref","name","label","defaultOptions","getOptions","getOptionLabel","getOptionValue","isMulti","placeholder","containerSx","props","theme","useTheme","value","selectedOptions","touched","error","setValue","setError","setTouched","useField","hasError","handleAction","action","option","filter","selectedOption","concat","addOption","removeOption","_jsxs","FormControl","sx","children","_jsx","FormLabel","Box","display","flexWrap","AsyncSelect","loadOptions","isClearable","onChange","newValue","actionType","removedValue","styles","container","baseCss","flexGrow","control","border","palette","danger","outlinedBorder","FormHelperText","fontSize","Yup","max","required","description","categories","min","ProductDetail","isDirty","setIsDirty","useState","fetchProductCategories","useLazyGetProductsCategoriesQuery","id","productId","useParams","currentPhoto","setCurrentPhoto","data","product","productFetchError","isFetching","isProductFetchPending","useGetProductQuery","updateProduct","isError","isProductUpdateFailed","productUpdateError","isLoading","isProductUpdatePending","isSucess","isProductUpdateSuccess","useUpdateProductMutation","Loading","toast","parseError","success","padding","marginBottom","maxWidth","marginLeft","marginRight","position","AspectRatio","variant","src","resolvePhotoSrc","coverPhoto","alt","Stack","spacing","direction","marginTop","justifyContent","photo1","photo2","photo3","photo4","map","photo","index","width","cursor","onClick","ButtonGroup","color","buttonFlex","Button","startDecorator","DeleteOutlinedIcon","StarBorderOutlinedIcon","Typography","level","Card","CardContent","orientation","Avatar","esco","profilePhoto","IconButton","component","RouterLink","to","ChevronRightOutlinedIcon","DirtyFormik","initialValues","validationSchema","ProductSchema","onSubmit","async","updatedValues","difference","values","isEmpty","onDirty","Form","TextInput","inputValue","callback","unwrap","then","productCategories","_ref2","toLowerCase","includes","catch","err","message","Textarea","bottom","type","size","disabled","SaveOutlinedIcon","loading","loadingPosition","IsDirtyForm","dirty","useFormikContext","useEffect","_Fragment","Formik","transform","require","isEqual","isObject","isArray","Array","origObj","newObj","changes","arrayIndexCounter","result","key"],"sourceRoot":""}