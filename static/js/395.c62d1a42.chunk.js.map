{"version":3,"file":"static/js/395.c62d1a42.chunk.js","mappings":"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","sources":["hooks/useUpdateGroup.js","components/GroupProfile/GroupProfile.js","utils/getGroupMembers.js","components/common/fields/DirtyFormik.js","utils/difference.js","../node_modules/@mui/icons-material/LockResetOutlined.js"],"sourcesContent":["import { toast } from \"react-toastify\";\nimport parseError from \"../components/common/utils/parse-error\";\nimport { useUpdateGroupMutation } from \"../services/group\";\n\nexport default function useUpdateGroup() {\n  const [_updateGroup, { isLoading }] = useUpdateGroupMutation();\n  function formatBody(body) {\n    const bodyCopy = structuredClone(body);\n    const { farmers, agroProcessors } = bodyCopy;\n    if (!!farmers?.length) {\n      bodyCopy[\"farmerIds\"] = farmers.map((farmer) => farmer.id);\n      delete bodyCopy[\"farmers\"];\n    }\n    if (!!agroProcessors?.length) {\n      bodyCopy[\"agroProcessorIds\"] = agroProcessors.map(\n        (agroProcessor) => agroProcessor.id\n      );\n      delete bodyCopy[\"agroProcessors\"];\n    }\n    return bodyCopy;\n  }\n\n  async function updateGroup(groupId, body) {\n    const _body = formatBody(body);\n    const { unwrap } = _updateGroup({ groupId, ..._body });\n    try {\n      const group = await unwrap();\n      toast.success(\"Group update\");\n      return group;\n    } catch (err) {\n      toast.error(`Group update failed. Reason: ${parseError(err)}`);\n    }\n  }\n\n  return [updateGroup, isLoading];\n}\n","import {\n  AspectRatio,\n  Avatar,\n  AvatarGroup,\n  Box,\n  Button,\n  ButtonGroup,\n  Sheet,\n  Stack,\n  Typography,\n} from \"@mui/joy\";\nimport { useParams } from \"react-router\";\nimport Loading from \"../common/utils/Loading\";\nimport SaveOutlinedIcon from \"@mui/icons-material/SaveOutlined\";\nimport LockResetOutlinedIcon from \"@mui/icons-material/LockResetOutlined\";\nimport DeleteOutlinedIcon from \"@mui/icons-material/DeleteOutlined\";\nimport { Form } from \"formik\";\nimport difference from \"../../utils/difference\";\nimport isEmpty from \"../../utils/isEmpty\";\nimport DirtyFormik from \"../common/fields/DirtyFormik\";\nimport { useState } from \"react\";\nimport resolvePhotoSrc from \"../../utils/resolve-photo-src\";\nimport { useGetGroupQuery } from \"../../services/group\";\nimport Error from \"../common/utils/Error\";\nimport GroupProfileSchema from \"../../validation-schemas/group/GroupProfileSchema\";\nimport getGroupMembers from \"../../utils/getGroupMembers\";\nimport toTitleCase from \"../../utils/toTitleCase\";\nimport FarmerSelect from \"../common/fields/FarmerSelect\";\nimport LocalSelect from \"../common/fields/LocalSelect\";\nimport TextInput from \"../common/fields/TextInput\";\nimport Textarea from \"../common/fields/Textarea\";\nimport useUpdateGroup from \"../../hooks/useUpdateGroup\";\nimport useDeleteGroup from \"../../hooks/useDeleteGroup\";\nimport AgroProcessorSelect from \"../common/fields/AgroProcessorSelect\";\n\nexport default function GroupProfile() {\n  const { id: groupId } = useParams();\n  // Determines whether edits have been made to the profile form, if yes, the form is dirty\n  const [isDirtyProfile, setIsDirtyProfile] = useState(false);\n  const [deleteGroup, isDeletingGroup] = useDeleteGroup();\n  const [updateGroup, isUpdatingGroup] = useUpdateGroup();\n\n  const {\n    data: group,\n    error: fetchError,\n    isFetching,\n  } = useGetGroupQuery(groupId);\n\n  if (isFetching) return <Loading />;\n\n  if (!!fetchError) return <Error error={fetchError} />;\n\n  if (!!group) {\n    const groupMembers = getGroupMembers(group);\n    console.log(group);\n    return (\n      <Box\n        sx={{\n          padding: 2,\n          marginBottom: 3,\n          maxWidth: 800,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <Sheet\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            borderRadius: \"md\",\n          }}\n          variant=\"soft\"\n          color=\"success\"\n        >\n          <Box sx={{ width: 400, position: \"relative\" }}>\n            <AspectRatio variant=\"plain\">\n              <img src={resolvePhotoSrc(group.coverPhoto)} alt={group.name} />\n            </AspectRatio>\n            <AvatarGroup\n              sx={{\n                position: \"absolute\",\n                left: 10,\n                bottom: -20,\n              }}\n            >\n              <Avatar\n                size=\"sm\"\n                variant=\"solid\"\n                src={resolvePhotoSrc(group.profilePhoto)}\n              ></Avatar>\n              {groupMembers.slice(0, 4).map((member) => {\n                return (\n                  <Avatar\n                    src={resolvePhotoSrc(member.profilePhoto)}\n                    size=\"sm\"\n                    variant=\"solid\"\n                  />\n                );\n              })}\n            </AvatarGroup>\n          </Box>\n        </Sheet>\n        <ButtonGroup\n          variant=\"soft\"\n          color=\"warning\"\n          buttonFlex={1}\n          sx={{ marginTop: 4 }}\n        >\n          <Button\n            disabled={isDeletingGroup}\n            loading={isDeletingGroup}\n            loadingPosition=\"start\"\n            startDecorator={<DeleteOutlinedIcon />}\n            onClick={async () => {\n              await deleteGroup(groupId);\n            }}\n          >\n            Delete\n          </Button>\n\n          <Button startDecorator={<LockResetOutlinedIcon />}>Reset</Button>\n        </ButtonGroup>\n        <Typography level=\"h3\" sx={{ marginTop: 3, marginBottom: 2 }}>\n          {toTitleCase(group.name)}\n        </Typography>\n        <DirtyFormik\n          initialValues={{ ...group }}\n          validationSchema={GroupProfileSchema}\n          onSubmit={async (values) => {\n            // Submit only values that were updated\n            const updatedValues = difference(group, values);\n            if (!isEmpty(updatedValues)) {\n              await updateGroup(groupId, updatedValues);\n            }\n          }}\n          onDirty={(isDirty) => setIsDirtyProfile(isDirty)}\n        >\n          <Form>\n            <TextInput name=\"name\" label=\"Name\" sx={{ marginBottom: 2 }} />\n            <TextInput\n              name=\"phoneNumber\"\n              label=\"Phone number\"\n              sx={{ marginBottom: 2 }}\n            />\n            <TextInput\n              name=\"email\"\n              label=\"Email\"\n              type=\"email\"\n              sx={{ marginBottom: 2 }}\n            />\n            <TextInput\n              name=\"address\"\n              label=\"Address\"\n              sx={{ marginBottom: 2 }}\n            />\n            <TextInput\n              name=\"website\"\n              label=\"Website\"\n              sx={{ marginBottom: 2 }}\n            />\n            <LocalSelect\n              label=\"What kind of group is this?\"\n              name=\"type\"\n              defaultValue=\"SACCO\"\n              options={[\"SACCO\", \"COOPERATIVE\", \"OTHER\"]}\n              sx={{ marginBottom: 2 }}\n            ></LocalSelect>\n            <Textarea\n              name=\"description\"\n              label=\"Tell us more about this group\"\n            />\n            <Typography level=\"title\" sx={{ marginTop: 2 }}>\n              Members\n            </Typography>\n            <FarmerSelect\n              name=\"farmers\"\n              placeholder=\"Search to add farmers\"\n              sx={{ marginBottom: 2 }}\n            />\n            <AgroProcessorSelect\n              name=\"agroProcessors\"\n              placeholder=\"Search to add agro processors\"\n            />\n            <Stack\n              direction=\"row\"\n              sx={{\n                marginTop: 3,\n                width: \"100%\",\n              }}\n            >\n              <Button\n                sx={{ flexGrow: 1 }}\n                type=\"reset\"\n                size=\"md\"\n                variant=\"soft\"\n                color=\"success\"\n                disabled={!isDirtyProfile || isUpdatingGroup}\n              >\n                Undo Changes\n              </Button>\n              <Button\n                size=\"md\"\n                color=\"success\"\n                variant=\"solid\"\n                startDecorator={<SaveOutlinedIcon />}\n                sx={{ flexGrow: 2, marginLeft: 2 }}\n                type=\"submit\"\n                disabled={!isDirtyProfile || isUpdatingGroup}\n                loading={isUpdatingGroup}\n                loadingPosition=\"start\"\n              >\n                Save\n              </Button>\n            </Stack>\n          </Form>\n        </DirtyFormik>\n      </Box>\n    );\n  }\n}\n","export default function getGroupMembers(group) {\n  return [...(group?.farmers || []), ...(group?.agroProcessors || [])];\n}\n","import { Formik, useFormikContext } from \"formik\";\nimport { useEffect } from \"react\";\n\nfunction IsDirtyForm({ onDirty, children }) {\n  const { dirty: isDirty } = useFormikContext();\n  useEffect(() => {\n    onDirty(isDirty);\n  }, [isDirty, onDirty]);\n  return <>{children}</>;\n}\n\nexport default function DirtyFormik({ children, onDirty, ...props }) {\n  return (\n    <Formik {...props}>\n      <IsDirtyForm onDirty={onDirty}>{children}</IsDirtyForm>\n    </Formik>\n  );\n}\n","const transform = require(\"lodash.transform\");\nconst isEqual = require(\"lodash.isequal\");\nconst isObject = require(\"lodash.isobject\");\n\nconst { isArray } = Array;\n/**\n * Find difference between two objects\n * @param  {object} origObj - Source object to compare newObj against\n * @param  {object} newObj  - New object with potential changes\n * @return {object} differences\n */\nexport default function difference(origObj, newObj) {\n  function changes(newObj, origObj) {\n    return transform(newObj, function (result, value, key) {\n      if (!isEqual(value, origObj[key])) {\n        /* For arrays, the whole changed array is taken instead of picking only \n        the differences between the original array and the changed array */\n        result[key] =\n          isObject(value) &&\n          isObject(origObj[key]) &&\n          !isArray(value) &&\n          !isArray(origObj[key])\n            ? changes(value, origObj[key])\n            : value;\n      }\n    });\n  }\n  return changes(newObj, origObj);\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 3c-4.97 0-9 4.03-9 9 0 .06.01.12.01.19l-1.84-1.84-1.41 1.41L5 16l4.24-4.24-1.41-1.41-1.82 1.82c0-.06-.01-.11-.01-.17 0-3.86 3.14-7 7-7s7 3.14 7 7-3.14 7-7 7c-1.9 0-3.62-.76-4.88-1.99L6.7 18.42C8.32 20.01 10.55 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9m2 8v-1c0-1.1-.9-2-2-2s-2 .9-2 2v1c-.55 0-1 .45-1 1v3c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-3c0-.55-.45-1-1-1m-1 0h-2v-1c0-.55.45-1 1-1s1 .45 1 1z\"\n}), 'LockResetOutlined');"],"names":["useUpdateGroup","_updateGroup","isLoading","useUpdateGroupMutation","async","groupId","body","_body","bodyCopy","structuredClone","farmers","agroProcessors","length","map","farmer","id","agroProcessor","formatBody","unwrap","group","toast","success","err","error","parseError","GroupProfile","useParams","isDirtyProfile","setIsDirtyProfile","useState","deleteGroup","isDeletingGroup","useDeleteGroup","updateGroup","isUpdatingGroup","data","fetchError","isFetching","useGetGroupQuery","_jsx","Loading","Error","groupMembers","getGroupMembers","console","log","_jsxs","Box","sx","padding","marginBottom","maxWidth","marginLeft","marginRight","position","children","Sheet","display","justifyContent","borderRadius","variant","color","width","AspectRatio","src","resolvePhotoSrc","coverPhoto","alt","name","AvatarGroup","left","bottom","Avatar","size","profilePhoto","slice","member","ButtonGroup","buttonFlex","marginTop","Button","disabled","loading","loadingPosition","startDecorator","DeleteOutlinedIcon","onClick","LockResetOutlinedIcon","Typography","level","toTitleCase","DirtyFormik","initialValues","validationSchema","GroupProfileSchema","onSubmit","updatedValues","difference","values","isEmpty","onDirty","isDirty","Form","TextInput","label","type","LocalSelect","defaultValue","options","Textarea","FarmerSelect","placeholder","AgroProcessorSelect","Stack","direction","flexGrow","SaveOutlinedIcon","IsDirtyForm","_ref","dirty","useFormikContext","useEffect","_Fragment","_ref2","props","Formik","transform","require","isEqual","isObject","isArray","Array","origObj","newObj","changes","result","value","key","_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}